[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bienvenidos al curso",
    "section": "",
    "text": "En esta breve página web que hemos preparado trataremos de exponer de forma clara y sencilla las ventajas que supone trabajar con lenguajes de programación (como son R y Python) para la investigación e innovación en el área sanitaria. Esta misma página se encuentra realiza bajo el Framework Quarto disponible para su uso tanto en R como en Python.\n\n\n\n\n\n\n¿Que es R?\n\nR en un lenguaje de programación de uso libre y colaborativo centrado en el análisis estadístico creado en el año 1995 con una versión estable para el uso por el público general en el año 2000.\nEn la actualidad se encuentra entre los 20 lenguajes de programación mas utilizados y dispone de conexión con otros lenguajes de programación como son Python, SQL, HTML, CSS o JavaScript.\n\n\n\n\n\n¿Que es Python?\n\nPython es un lenguaje de programación de uso libre y colaborativo multiproposito tiene sus orígenes a finales de la década de 1980 y principios de 1990.\nEn la actualidad se encuentra entre los 20 lenguajes de programación mas utilizados y dispone de conexión con otros lenguajes de programación como son Python, SQL, HTML, CSS o JavaScript.\n\n\n\n\n\nLa importancia de su uso\n\nEn la actualidad, tanto R como Python representan los motores de ‘’Gold standar’’ para la producción científica, siendo utilizado de forma profesional tanto por el sector privado como por el sector público en escenarios tan diversos como investigación física, matemáticas, economía o salud.\nR se encuentra centrado en el análisis estadístico y Python representa un lenguaje más amplio, con capacidad para la programación en robótica, creación de páginas web…Sin embargo, durante los últimos años, se han desarrollado en R herramientas que van más allá del análisis estadístico, encontrando también desarrollo de herramientas para la adquisición y gestión de la información así como la difusión de los resultados.\nDurante esta breve sesión encontraremos ejemplos de los diversos usos de los lenguajes de programación así como de las herramientas a usar para optimizar el flujo de trabajo con ellos. Dispondréis de la siguiente información:\n\nHerramientas para la optimización del flujo de trabajo\n\nEn esta sección explicaremos de forma breve los programas de Uso libre y gratuito para optimizar el flujo de trabajo con ambos lenguajes de programación.\n\nHerramientas para la recogida de datos y su gestión\n\nEn esta sección explicaremos de forma breve las herramientas que ambos sistemas disponen para la recogida de datos y su gestión; haciendo para ello uso de la integración con otros lenguajes de programación destinados a la gestión del dato (SQL y noSQL).\n\nAnálisis estadísticos y creación de algoritmos\n\nEn esta sección explicaremos de forma breve las capacidades de los lenguajes para la realización de análisis estadísticos avanzados, análisis geo-espaciales, minería de texto, redes neuronales, algoritmos no supervisados…\n\nDifusión del conocimiento\n\nEn esta sección explicaremos de forma breve las herramientas que disponen estos lenguajes para difundir el conocimiento. Desde la creación de páginas web (como la que se presenta), creación de presentaciones y la integración con el lenguaje Latex de creación de texto de alta calidad.\n\n\n\n¿Estás preparado/a?\n\n\n¡Comencemos!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nui &lt;- fluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\n        inputId = \"bins\",\n        label = \"Number of bins:\",\n        min = 1,\n        max = 50,\n        value = 30\n      )\n    ),\n    mainPanel(\n      plotOutput(outputId = \"distPlot\")\n    )\n  )\n)\nserver &lt;- function(input, output) {\n  output$distPlot &lt;- renderPlot({\n    x &lt;- faithful$waiting\n    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n    hist(x,\n      breaks = bins, col = \"#75AADB\", border = \"white\",\n      xlab = \"Waiting time to next eruption (in mins)\",\n      main = \"Histogram of waiting times\"\n    )\n  })\n}\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "docs/About.html",
    "href": "docs/About.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#importancia-de-los-lenguajes-de-programación",
    "href": "index.html#importancia-de-los-lenguajes-de-programación",
    "title": "Bienvenidos al curso",
    "section": "Importancia de los lenguajes de programación",
    "text": "Importancia de los lenguajes de programación\nEn la actualidad, el lenguaje de programación de R representa junto con Python los motores de ‘’Gold standar’’ para la producción científica, siendo utilizado de forma profesional tanto por el secto privado como por el sector público en escenarios tan diversos como investigación física, matemáticas, economía o salud.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nui &lt;- fluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\n        inputId = \"bins\",\n        label = \"Number of bins:\",\n        min = 1,\n        max = 50,\n        value = 30\n      )\n    ),\n    mainPanel(\n      plotOutput(outputId = \"distPlot\")\n    )\n  )\n)\nserver &lt;- function(input, output) {\n  output$distPlot &lt;- renderPlot({\n    x &lt;- faithful$waiting\n    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n    hist(x,\n      breaks = bins, col = \"#75AADB\", border = \"white\",\n      xlab = \"Waiting time to next eruption (in mins)\",\n      main = \"Histogram of waiting times\"\n    )\n  })\n}\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "Gestion_dato.html",
    "href": "Gestion_dato.html",
    "title": "La gobernanza del dato",
    "section": "",
    "text": "Gestión del dato\nEn cualquier estudio de investigación o innovación la calidad de la información que se obtiene es de vital importancia, así como las herramientas que se utilizan para guardar dicha información debido principalmente a su seguridad.\nPor definición, una base de datos es:\n\nUna colección organizada de información que se almacena electrónicamente para facilitar su acceso, gestión y actualización. Se trata de un sistema que permite almacenar, recuperar y manipular datos de manera eficiente, utilizando un software llamado sistema de gestión de bases de datos (DBMS)\n\nPor lo general, podemos definir las bases de datos actuales en dos categorias:\n\nBases de datos SQL: Organizan la información en tablas.\n\nActualmente, la base de datos mas popular para ello es MySQL. Para poder conectar y gestionar la información, tanto R como Python disponen de formas sencillas de integrarse. A continuación te presentamos un ejemplo de ello:\n\n# Habilitamos las librerías que utilizaremos\nlibrary(DBI)\nlibrary(RMySQL)\n\n# Establecemos la conexión\ndb &lt;- dbConnect(RMySQL::MySQL(),\n  user = \"tu_nombre_usuario\",\n  password = \"tu_contraseña\",\n  host = \"tu_host\",\n  port = 3306,\n  dbname = \"nombre_de_tu_base_de_datos\"\n)\n\n# Ejecutamos una consulta de ejemplo\nresultado &lt;- dbGetQuery(db, \"SELECT * FROM tu_tabla LIMIT 5\")\n\n# Cerramos la conexión cuando hayas terminado\ndbDisconnect(db)\n\nTambién disponemos podemos hacer uso de bases SQL de forma local con SQLite. A continuación te presentamos un ejemplo:\n\n# Habilitamos las librerías que utilizaremos\nlibrary(DBI)\nlibrary(RSQLite)\n\n# Conectamos la base de datos\ndb &lt;- dbConnect(RSQLite::SQLite(), \"biblioteca.sqlite\")\n\n# Creamos una tabla\ndbExecute(db, \"\n  CREATE TABLE IF NOT EXISTS libros (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    titulo TEXT NOT NULL,\n    autor TEXT NOT NULL,\n    anio INTEGER\n  )\n\")\n\n# Insertamos datos\nlibros &lt;- data.frame(\n  titulo = c(\"El Quijote\", \"Cien años de soledad\", \"1984\"),\n  autor = c(\"Miguel de Cervantes\", \"Gabriel García Márquez\", \"George Orwell\"),\n  anio = c(1605, 1967, 1949)\n)\n\ndbWriteTable(db, \"libros\", libros, append = TRUE)\n\n# Cerramos la conexión\ndbDisconnect(db)\n\n\nBases de datos No solo SQL: Organizan la información de forma dinámica.\n\nActualmente, una de las bases de datos no solo SQL mas populares en MongoDB. Esta se utiliza cuando la información no puede ser estructurada en tablas. Por supuesto, ambos lenguajes son capaces de conectarse y utilizar estas bases de datos, aqui tiene un ejemplos.\n\n# Habilitamos la librería que utilizaremos\nlibrary(mongolite)\n\n# Conectamos con a MongoDB\nconexion &lt;- mongo(collection = \"usuarios\", db = \"mi_base_de_datos\", url = \"mongodb://localhost:27017\")\n\n# Insertamos un documento\nnuevo_usuario &lt;- list(\n  nombre = \"Ana\",\n  edad = 28,\n  email = \"ana@ejemplo.com\"\n)\nconexion$insert(nuevo_usuario)\n\n# Cerramos la conexión\nrm(conexion)\n\n\n\nLa obtención de la información\nPor supuesto, antes de gestionar la información debemos obtenerla. Normalmente lo solemos realizar a través de Cuadernos de Recogida de Datos a papel que luego son mecanizados a ordenador (en un excel por ejemplo). Nuestros lenguajes de programación nos permiten realizar Programas informáticos de recogida de datos. Formularios a medida con todo aquello que necesitamos.\nComo ejemplo os presentamos el framework shiny, disponible en R y python, para la creación rápida de programas informáticos. A continuación disponéis de un ejemplo:\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 800\nlibrary(shiny)\nui &lt;- fluidPage(\n  titlePanel(\"Formulario de contacto\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"edad\",\"¿Que edad tiene?\", value = NULL, min = 0, max = 99),\n      sliderInput(\"altura\",\"¿Cuanto mide?\", min = 130, max = 250, value = 200),\n      radioButtons(\"comida\",\"¿Le gusta la comida china?\", choices = c(\"Sí\",\"No\"), inline = T),\n      conditionalPanel(\n        condition = \"input.comida == 'Sí'\",\n        selectInput(\"tipo\",\"¿Que plato le gusta?\", choices = list(\"Arroz tres delicias\",\"Pato a lo        cantonés\"))\n      ),\n      actionButton(\"guardar\",\"Guardar mis datos\")\n      \n    ),\n    mainPanel(\n      wellPanel(\n        tags$h3(\"Sus datos\"),\n        tags$hr(),\n        textOutput(\"edadMostrada\"),\n        textOutput(\"alturaMostrada\"),\n        textOutput(\"chinaMostrada\"),\n        conditionalPanel(\n          condition = \"input.comida == 'Sí'\",\n          textOutput(\"comidaMostrada\")\n        )\n        \n      )\n    )\n  )\n)\nserver &lt;- function(input, output) {\n  observeEvent(input$guardar,{\n    output$edadMostrada &lt;- renderText({\n      paste(\"Su edad es:\", input$edad)\n    })\n    output$alturaMostrada &lt;- renderText({\n      paste(\"Su altura es:\", input$altura)\n    })\n    output$chinaMostrada &lt;- renderText({\n      paste(input$comida,\"le gusta la comida china\")\n    })\n    output$comidaMostrada &lt;- renderText({\n      paste(\"A usted le gusta el:\", input$tipo)\n    })\n  })\n  \n  \n}\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "interfaz_trabajo.html",
    "href": "interfaz_trabajo.html",
    "title": "Entornos de Desarrollo Integrado",
    "section": "",
    "text": "Trabajar directamente con la consola de programación puede resultar complejo e ineficiente. Por ello, en la actualidad contamos con programas informáticos que actúan de interfaces de trabajo (Entornos de Desarrollo Integrado, IDE). Estas IDE nos permiten trabajar con varios tipos de archivos a la vez y nos ofrecen utilidades como son:\n\nDocumentación de apoyo para las funciones de trabajo de los lenguajes.\nGestión eficiente de los archivos y documentos con lo que trabajemos.\nCreación de texto de programación.\nVisualización de los resultados obtenidos (pestañas con gráficos, documentos, html…)\n\nAunque existen varias IDE, nosotros os presentaremos 3 de ellas, bastante conocidas y ampliamente utilizadas de forma profesional: Rstudio, PyCharm y Visual Studio\n\nRstudio\nLa IDE Rstudio se encuentra diseñada por la empresa POSIT. Es carácter de código abierto y completamente gratuito. Puede ser descargado tanto para Windows como IOS o Ubuntu. La\nIdeado principalmente para el lenguaje de programación R y posteriormente Python, permite trabajar con numerosos lenguajes de programación al mismo tiempo (html, javaScript, css, SQL…). A su vez, dispone de editores para la creación de documentación de alta calidad a través de Latex.\n\n\n\nVisualización de R studio.\n\n\n\n\n\nPycharm\nLa IDE de Pycharm se encuentra diseñada por JETBRAINS. Aunque su versión profesional es de acceso por subscripción, dispone de una versión de código abierto y completamente gratuido como es Pycharm Community Edition.\nIdeada principalmente para el lenguaje de programción de Python. A día de hoy también permite la integración con otros lenguajes de programación.\n\n\n\nVisualización de pyCharm.\n\n\n\n\n\nVisual Studio\nLa IDE de Visual Studio se encuentra creada por la empresa Microsoft. Existe una versión completamente gratuita.\nSe trata de una IDE multiplataforma, es decir, es capaz de integrar diversos lenguajes de programación. Su principal objetivo es servir de IDE para la creación de aplicaciones y páginas web.\n\n\n\nVisualización de Visual Studio."
  },
  {
    "objectID": "flujo_trabajo.html",
    "href": "flujo_trabajo.html",
    "title": "Flujo de trabajo",
    "section": "",
    "text": "Si nunca hemos trabajado con lenguajes de programación puede resultar complicado e incluso desafiante hacer uso de estas herramientas. Sin embargo, una vez entendida la lógica con la que trabajan encontrareis como las capacidades de estas herramientas superan con crees sus inconvenientes (que únicamente suele ser la curva de aprendizaje que necesitan).\nPor ello, para utilizar correctamente estas herramientas ante es necesario conocer, de forma básica, su funcionamiento; objetivo de esta breve sección."
  },
  {
    "objectID": "flujo_trabajo.html#órdenes-a-instalar",
    "href": "flujo_trabajo.html#órdenes-a-instalar",
    "title": "Flujo de trabajo",
    "section": "Órdenes a instalar",
    "text": "Órdenes a instalar\nLas ordenes a instalar suele venir compactadas en unos archivos llamado Librerías. Cada librería tiene un objetivo (tendremos algunas especializadas en manipular datos, otras en análisis estadísticos básicos, otras en minerías de texto…). Las librerías suelen ser realizadas de forma general por científicos (como tú) que desarrollan un procedimiento y lo “donan” al público para que todo el mundo pueda hacer uso de él (el modelo Open Science).\nA continuación vamos a instalar una librería que se llama DescTools (que dispone de ordenes para realizar el análisis descriptivo de los datos) y vamos a describir los datos que disponemos utilizando sus comandos:\n\n# Verificamos si DescTools está instalada; si no, se instala\nif (!require(\"DescTools\")) {\n  install.packages(\"DescTools\")\n  library(DescTools)\n}\n\nCargando paquete requerido: DescTools\n\n# Ejemplo: Calculamos intervalo de confianza para una proporción binomial\nn_exitos &lt;- 50\nn_total &lt;- 100\n\n# Utilizamos la orden BinomCI() de la librería\n\nresultado &lt;- BinomCI(x = n_exitos, n = n_total, conf.level = 0.95, method = \"wilson\")\n\n# Mostramos el resultado\nprint(resultado)\n\n     est    lwr.ci    upr.ci\n[1,] 0.5 0.4038315 0.5961685\n\n\nSi no sabemos qué es lo que hace una orden podemos poner una interrogación antes de la orden y el ordenaor buscará la información adjunta a dicha orden:\n\n?BinomCI()"
  },
  {
    "objectID": "flujo_trabajo.html#órdenes-propias",
    "href": "flujo_trabajo.html#órdenes-propias",
    "title": "Flujo de trabajo",
    "section": "Órdenes propias",
    "text": "Órdenes propias\nSi no encuentras una librería que tenga las órdenes que necesitas siempre pueden crearlas tu para luego utilizarlas. Aquí te mostramos un ejemplo de como se crearía la prueba de chi cuadrado de forma casera:\n\n# Función casera para la prueba chi-cuadrado\nchi_cuadrado_casera &lt;- function(tabla_observada) {\n  # Calcular totales de filas y columnas\n  totales_filas &lt;- rowSums(tabla_observada)\n  totales_columnas &lt;- colSums(tabla_observada)\n  total_general &lt;- sum(tabla_observada)\n  \n  # Calcular frecuencias esperadas\n  frecuencias_esperadas &lt;- outer(totales_filas, totales_columnas) / total_general\n  \n  # Calcular el estadístico chi-cuadrado\n  chi_cuadrado &lt;- sum((tabla_observada - frecuencias_esperadas)^2 / frecuencias_esperadas)\n  \n  # Calcular grados de libertad\n  grados_libertad &lt;- (nrow(tabla_observada) - 1) * (ncol(tabla_observada) - 1)\n  \n  # Calcular el valor p\n  valor_p &lt;- 1 - pchisq(chi_cuadrado, df = grados_libertad)\n  \n  # Crear y devolver el resultado\n  resultado &lt;- list(\n    estadistico = chi_cuadrado,\n    grados_libertad = grados_libertad,\n    valor_p = valor_p\n  )\n  \n  return(resultado)\n}\n\n# Ejemplo de uso\ntabla_ejemplo &lt;- matrix(c(30, 10, 20, 15), nrow = 2)\ncolnames(tabla_ejemplo) &lt;- c(\"Grupo A\", \"Grupo B\")\nrownames(tabla_ejemplo) &lt;- c(\"Categoría 1\", \"Categoría 2\")\nprint(tabla_ejemplo)\n\n            Grupo A Grupo B\nCategoría 1      30      20\nCategoría 2      10      15\n\n# Usar la función casera\nresultado_casero &lt;- chi_cuadrado_casera(tabla_ejemplo)\n\n# Imprimir resultados de la función casera\ncat(\"Valor p:\", resultado_casero$valor_p, \"\\n\\n\")\n\nValor p: 0.1017069 \n\n# Comparar con la función incorporada chisq.test()\nresultado_r &lt;- chisq.test(tabla_ejemplo, correct = F)\n\n# Imprimir resultados de chisq.test()\ncat(\"Resultados de chisq.test() de R:\\n\")\n\nResultados de chisq.test() de R:\n\nprint(resultado_r)\n\n\n    Pearson's Chi-squared test\n\ndata:  tabla_ejemplo\nX-squared = 2.6786, df = 1, p-value = 0.1017"
  }
]